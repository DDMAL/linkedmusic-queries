The code is not correct. My requirement is: If a given class fails to be engaged in a "domain->property->range" pattern with 
some of the other given classes and properties, you should not return the class. 

In other words, to clarify, by "forming a pattern", 
I mean, 
(1) if one of the given classes appear in the domain of one of the given ObjectProperties and one of the given classes appear in the range of that ObjectProperty, 
then you return the classes and the ObjectProperty in the pattern, plus the triples where the classes and the ObjectProperty are subjects. 
(2) if one of the given classes appear in the domain of one of the given DataProperty
For example, here
is an OWL code:
```
@prefix bf: <http://id.loc.gov/ontologies/bibframe/> .
@prefix ctm: <https://lib.ccmusic.edu.cn/ontologies/chinese_traditional_music#> .
@prefix event: <http://purl.org/NET/c4dm/event.owl#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
bf:place rdf:type owl:ObjectProperty ;
         rdfs:domain [ rdf:type owl:Class ; # unionOf
                                owl:unionOf ( bf:MusicInstrument
                                              ctm:MusicType
                                            )
                     ] ;
         rdfs:range bf:Place .
         
ctm:property rdf:type owl:ObjectProperty ;
             rdfs:domain bf:MusicInstrument ;
             rdfs:range bf:Place .

ctm:p2 rdf:type owl:ObjectProperty ;
                rdfs:domain bf:Place ;
                rdfs:range ctm:C .

ctm:p3 rdf:type owl:ObjectProperty ;
                rdfs:domain ctm:C ;
                rdfs:range ctm:C2 .

ctm:p4 rdf:type owl:ObjectProperty ;
                rdfs:domain ctm:C2 ;
                rdfs:range ctm:C3 .

ctm:p5 rdf:type owl:ObjectProperty ;
                rdfs:domain ctm:C4 ;
                rdfs:range ctm:C3 .

ctm:p6 rdf:type owl:DataProperty ;
                rdfs:domain ctm:C3 ;
                rdfs:range rdfs:Literal .

ctm:p7 rdf:type owl:DataProperty ;
                rdfs:domain ctm:C4 ;
                rdfs:range rdfs:Literal .

ctm:p8 rdf:type owl:DataProperty ;
                rdfs:domain ctm:C5 ;
                rdfs:range rdfs:Literal .

ctm:p9 rdf:type owl:ObjectProperty ;
                rdfs:domain ctm:C8 , # intersectionOf 
                            ctm:C9 ;
                rdfs:range ctm:C2 .

ctm:p0 rdf:type owl:ObjectProperty ;
                rdfs:domain ctm:C2 , 
                            [ rdf:type owl:Class ; # complementOf
                              owl:complementOf ctm:C
                            ] ;
                rdfs:range ctm:C6 ,
                            [ rdf:type owl:Class ; # complementOf
                              owl:complementOf ctm:C7
                            ] .
```
based on this code:
(1) Given classes ctm:MusicType, bf:Place, ctm:C3, ctm:C4 and given properties bf:place, ctm:p4; 
it will return:
classes ctm:MusicType, bf:Place and property bf:place

(2) Give classes ctm:C3, ctm:C and properties ctm:p6, ctm:p3;
it will return:
class ctm:C3, rdfs:Literal and property ctm:p6